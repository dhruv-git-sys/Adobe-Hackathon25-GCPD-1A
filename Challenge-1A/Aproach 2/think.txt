STRUCTURED OUTLINE EXTRACTOR - PREDICTION MODEL PLAN
==================================================

PROBLEM ANALYSIS:
- Input: PDF files converted to JSON segments (result.json format)
- Each segment has: size, flags, font, color, text, position info
- Output: Classify segments as title, H1, H2, H3, or skip
- Target: JSON with title and hierarchical outline

TRAINING DATA ANALYSIS:
- file01.pdf/json: LTC application form → title only, no outline
- file02.pdf/json: Testing syllabus → title + H1/H2 structure  
- file03.pdf/json: Research paper → title + hierarchical structure
- file04.pdf/json: STEM flyer → title + H1 structure
- file05.pdf/json: Event flyer → H1 only, no title

KEY FEATURES FOR CLASSIFICATION:
1. Text Features:
   - Font size (relative to document)
   - Font weight/style (bold, regular)
   - Text length
   - Text content patterns (capitalization, keywords)
   - Position on page (top segments likely titles)

2. Formatting Features:
   - flags (bold=20, regular=4)
   - font family (bold variants vs regular)
   - color (emphasis colors)
   - char_flags (formatting emphasis)

3. Contextual Features:
   - Relative position in document
   - Size compared to other segments
   - Text patterns (ALL CAPS, Title Case, etc.)

IMPLEMENTATION STRATEGY:

Phase 1: Data Preparation
- Extract all training data from PDF→JSON conversions
- Create feature matrix from segment properties
- Label data based on expected JSON outputs
- Handle class imbalance (few titles vs many paragraphs)

Phase 2: Feature Engineering
- Normalize font sizes within documents
- Create relative size rankings
- Extract text pattern features
- Add positional features (page number, segment order)

Phase 3: Model Selection
- Start with Rule-Based approach (fast, interpretable)
- Add ML classifier (Random Forest/SVM for small data)
- Keep models lightweight for Docker constraints

Phase 4: Hierarchical Logic
- Implement hierarchy detection (H1 > H2 > H3)
- Add post-processing for logical structure
- Handle edge cases (multiple titles, missing levels)

Phase 5: Integration & Testing
- Integrate with existing Code.py
- Test on all training files
- Optimize for speed (<10s) and memory (<200MB)

EXPECTED CHALLENGES:
- Limited training data (5 files)
- Diverse document formats
- Hierarchical structure detection
- Title vs H1 distinction

DELIVERABLES:
1. Think.txt (this plan)
2. model_trainer.py (training pipeline)
3. outline_predictor.py (prediction model)
4. Updated Code.py with prediction integration
5. Test results on training data

SUCCESS METRICS:
- Correct title identification
- Proper heading hierarchy
- Fast processing (<10s)
- Memory efficient (<200MB)
